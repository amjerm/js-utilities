{"version":3,"sources":["index.ts"],"names":[],"mappings":";AAiGO,aAAA,SAAA,EAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,6IAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAAA,SAAA,EAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,OAAA,YAAA,OAAA,GAAA,CAAA,IAAA,EAAA,GAAA,GAAA,EAAA,GAAA,EAAA,OAAA,EAAA,IAAA,IAAA,IAAA,EAAA,EAAA,EAAA,OAAA,cAAA,GAAA,EAAA,EAAA,QAAA,QAAA,EAAA,KAAA,EAAA,QAAA,GAAA,EAAA,SAAA,GAAA,GAAA,IAAA,MAAA,GAAA,GAAA,EAAA,EAAA,EAAA,QAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,GAAA,OAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,YAAA,QAAA,oBAAA,QAAA,SAAA,QAAA,cAAA,QAAA,kBAAA,QAAA,gBAAA,QAAA,uBAAA,EAAA,IAAA,EAAA,SAAA,EAAA,GAAA,IAAA,EAAA,GAAA,IAAA,IAAA,KAAA,EAAA,OAAA,UAAA,eAAA,KAAA,EAAA,IAAA,EAAA,QAAA,GAAA,IAAA,EAAA,GAAA,EAAA,IAAA,GAAA,MAAA,GAAA,mBAAA,OAAA,sBAAA,CAAA,IAAA,EAAA,EAAA,IAAA,EAAA,OAAA,sBAAA,GAAA,EAAA,EAAA,OAAA,IAAA,EAAA,QAAA,EAAA,IAAA,GAAA,OAAA,UAAA,qBAAA,KAAA,EAAA,EAAA,MAAA,EAAA,EAAA,IAAA,EAAA,EAAA,KAAA,OAAA,GA5FM,EAAoB,SAAC,GAC1B,IACA,EAAc,EAAY,QADrB,aACiC,IAExC,OAAuB,KAAvB,EAAY,OACH,IAAA,OAAA,EAAY,UAAU,EAAG,GAAO,MAAA,OAAA,EAAY,UAAU,EAAG,GAAM,KAAA,OAAA,EAAY,UAAU,IAG3F,GAoFF,QAAA,kBAAA,EA5EA,IAAM,EAAkB,SAAC,GAC1B,IAAA,EAAa,EAAQ,OAErB,GAAsB,iBAAf,GAA8E,OAAnD,EAAW,MAAM,+BAAwC,CAOtF,OAJsB,OAAzB,EAAW,MAFJ,oBAGT,EAAuB,UAAA,OAAA,IAGlB,EAGF,OAAA,MA+DF,QAAA,gBAAA,EAvDA,IAAM,EAAoB,SAAC,GAC1B,IAAA,EAAkB,EAAI,MAAM,KAAK,UAEnC,MAAA,KAAK,KAAK,EAAM,IACX,EAAM,GAEN,EAAM,IAiDV,QAAA,kBAAA,EAxCA,IAAM,EAAgB,SAAC,GAGvB,IAFC,IAAA,EAAc,OAAO,OAAO,GAEzB,EAAI,EAAG,EAAI,EAAY,OAAQ,IAClC,GAAmB,OAAnB,EAAY,GACP,OAAA,EAGJ,OAAA,GAgCF,QAAA,cAAA,EAxBA,IAAM,EAAW,SAAC,GAChB,OAAA,MAAA,GAuBF,QAAA,SAAA,EAfA,IAAM,EAAsB,SAAC,EAAgC,GAC5D,IAAA,EAAoC,GAMnC,OAJP,OAAO,QAAQ,GAAQ,QAAQ,SAAA,GAC7B,EAAa,GAAA,OAAA,GAAS,OAAA,EAAM,KAAQ,EAAM,KAGrC,GAQF,QAAA,oBAAA,EAAA,IAAM,EAAc,SAAC,GAMD,IANpB,IAAA,EAAuB,EAAQ,EAAR,GAAI,EAAI,EAAJ,KAAS,EAAU,EAAA,EAAzB,CAAA,KAAA,SACpB,EAAkB,MAAM,QAAQ,GAAM,EAAG,KAAK,KAAqB,iBAAP,EAAkB,EAAK,GAErF,EAAsB,UAAA,OAA2B,iBAApB,EAA+B,EAAkB,IAC9E,EAAoB,IAEC,EAAA,EAAA,EAAA,OAAO,QAAQ,GAAa,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,EAAA,GAAA,GAA3C,EAA2C,EAAA,GAAtC,EAAsC,EAAA,GAC/C,MAAM,QAAQ,KAChB,EAAQ,EAAM,KAAK,MAGA,iBAAV,GAAgC,KAAV,IAC/B,GAAgB,GAAA,OAAA,GAAoB,OAAA,EAAO,KAAA,OAAA,GAC3C,EAAoB,KAUjB,MANa,iBAAT,GAA8B,KAAT,IAC9B,GAAsB,SAAA,OAAwB,QAAxB,EAAA,mBAAmB,UAAK,IAAA,EAAA,EAAI,KAGpD,EAAY,EAAU,QAAQ,SAAU,MArBnC,QAAA,YAAA","file":"index.js","sourceRoot":"../src","sourcesContent":["/**\n * Formats phone number as (###) ###-####\n * @param {string} phoneNumber - Phone number to format\n * @returns {string}\n */\nexport const formatPhoneNumber = (phoneNumber: string): string => {\n  const re = /[\\s\\-().]/g\n  const cleanNumber = phoneNumber.replace(re, '')\n\n  if (cleanNumber.length === 10) {\n    return `(${cleanNumber.substring(0, 3)}) ${cleanNumber.substring(3, 6)}-${cleanNumber.substring(6)}`\n  }\n\n  return phoneNumber\n}\n\n/**\n * Returns validated URI or null\n * @param {string} website - URI string\n * @returns {string|null}\n */\nexport const validateWebsite = (website: string): string | null => {\n  let cleanedUrl = website.trim()\n\n  if (typeof cleanedUrl === 'string' && cleanedUrl.match(/^[\\w:/.-]+\\.[\\w]{2,}(\\/)?$/) !== null) {\n    const re = /^http(s)?:\\/\\//\n\n    if (cleanedUrl.match(re) === null) {\n      cleanedUrl = `http://${cleanedUrl}`\n    }\n\n    return cleanedUrl\n  }\n\n  return null\n}\n\n/**\n * Gets last segment of a URI\n * @param {string} uri\n * @returns {string}\n */\nexport const getLastURISegment = (uri: string): string => {\n  const parts: string[] = uri.split('/').reverse()\n\n  if (/\\w/.test(parts[0])) {\n    return parts[0]\n  } else {\n    return parts[1]\n  }\n}\n\n/**\n* Used to determine if an object is without null values in the first level.\n* @param {object}\n* @returns {boolean}\n*/\nexport const objectIsDense = (object: object): boolean => {\n  const valuesArray = Object.values(object)\n\n  for (let i = 0; i < valuesArray.length; i++) {\n    if (valuesArray[i] === null) {\n      return false\n    }\n  }\n  return true\n}\n\n/**\n * Shorthand for foo !== null && foo !== undefined.\n * @param {any}\n * @returns {boolean}\n */\nexport const hasValue = (input: any): boolean => {\n  return input !== null && input !== undefined\n}\n\n/**\n * Prepends a string to all property names in an object\n * @param {object} - Routes object\n * @returns {object}\n */\nexport const prependToObjectKeys = (object: { [key: string]: any }, string: string): object => {\n  const newObject: { [key: string]: any } = {}\n\n  Object.entries(object).forEach(entry => {\n    newObject[`${string}${entry[0]}`] = entry[1]\n  })\n\n  return newObject\n}\n\n/**\n * Generates an Outlook friendly mailto URI\n * @param {object} - Email details object\n * @returns {string}\n */\nexport const makeMailURI = ({ to, body, ...parameters }: { to: string, body: string }): string => {\n  const recipientString = Array.isArray(to) ? to.join(',') : typeof to === 'string' ? to : ''\n\n  let mailToUri = `mailto:${typeof recipientString === 'string' ? recipientString : ''}`\n  let parameterOperator = '?'\n\n  for (let [key, value] of Object.entries(parameters)) {\n    if (Array.isArray(value)) {\n      value = value.join(',')\n    }\n\n    if (typeof value === 'string' && value !== '') {\n      mailToUri += `${parameterOperator}${key}=${value}`\n      parameterOperator = '&'\n    }\n  }\n\n  if (typeof body === 'string' && body !== '') {\n    mailToUri += `&body=${encodeURIComponent(body) ?? ''}`\n  }\n\n  mailToUri = mailToUri.replace('%u2019', '\\'')\n\n  return mailToUri\n}\n"]}