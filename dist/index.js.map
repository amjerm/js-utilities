{"mappings":"qkDAKiC,SAACA,OAE1BC,EAAcD,EAAYE,QADrB,aACiC,WAEjB,KAAvBD,EAAYE,kBACHF,EAAYG,UAAU,EAAG,GAAA,MAAAC,OAAOJ,EAAYG,UACrD,EACA,GAAA,KAAAC,OACGJ,EAAYG,UAAU,IAGtBJ,qCAQsB,SAACM,OAC1BC,EAAaD,EAAQE,UAGD,iBAAfD,GAC4C,OAAnDA,EAAWE,MAAM,8BAAkC,QAItB,OAAzBF,EAAWE,MAFJ,oBAGTF,EAAAA,UAAAA,OAAuBA,IAGlBA,SAGF,sCAQwB,SAACG,OAC1BC,EAAkBD,EAAIE,MAAM,KAAKC,qBAE9BC,KAAKH,EAAM,IACXA,EAAM,GAENA,EAAM,sCASY,SAACI,WACtBC,EAAcC,OAAOC,OAAOH,GAEzBI,EAAI,EAAGA,EAAIH,EAAYb,OAAQgB,OACf,OAAnBH,EAAYG,UACP,SAGJ,iCAQe,SAACC,UAChBA,MAAAA,4BAQ0B,SACjCL,EACAM,OAEMC,EAAAA,UAENL,OAAOM,QAAQR,GAAQS,SAAQ,SAACC,GAC9BH,EAAAA,GAAAA,OAAaD,GAAAA,OAASI,EAAM,KAAQA,EAAM,MAGrCH,mCAQkB,SAAAI,aACzBC,EAAAA,EAAAA,GACAC,EAAAA,EAAAA,KACGC,EAAAA,EAAAA,EAAAA,CAAAA,KAAAA,SAKGC,EAAkBC,MAAMC,QAAQL,GAClCA,EAAGM,KAAK,KACM,iBAAPN,EACPA,EACA,GAEAO,EAAAA,UAAAA,OACyB,iBAApBJ,EAA+BA,EAAkB,IAEtDK,EAAoB,UAEClB,OAAOM,QAAQM,GAAAA,EAAAA,EAAAA,OAAAA,IAAAA,iBAA9BO,EAAAA,EAAAA,GAAKC,EAAAA,EAAAA,GACTN,MAAMC,QAAQK,KAChBA,EAAQA,EAAMJ,KAAK,MAGA,iBAAVI,GAAgC,KAAVA,IAC/BH,GAAAA,GAAAA,OAAgBC,GAAAA,OAAoBC,EAAAA,KAAAA,OAAOC,GAC3CF,EAAoB,KAIJ,iBAATP,GAA8B,KAATA,IAC9BM,GAAAA,SAAAA,OAAyCN,QAAzCM,EAAsBI,mBAAmBV,UAAAA,IAAAA,EAAAA,EAAS,YAGpDM,EAAYA,EAAUhC,QAAQ,SAAU","sources":["./src/index.ts"],"sourcesContent":["/**\n * Formats phone number as (###) ###-####\n * @param {string} phoneNumber - Phone number to format\n * @returns {string}\n */\nexport const formatPhoneNumber = (phoneNumber: string): string => {\n  const re = /[\\s\\-().]/g\n  const cleanNumber = phoneNumber.replace(re, '')\n\n  if (cleanNumber.length === 10) {\n    return `(${cleanNumber.substring(0, 3)}) ${cleanNumber.substring(\n      3,\n      6\n    )}-${cleanNumber.substring(6)}`\n  }\n\n  return phoneNumber\n}\n\n/**\n * Returns validated URI or null\n * @param {string} website - URI string\n * @returns {string|null}\n */\nexport const validateWebsite = (website: string): string | null => {\n  let cleanedUrl = website.trim()\n\n  if (\n    typeof cleanedUrl === 'string' &&\n    cleanedUrl.match(/^[\\w:/.-]+\\.[\\w]{2,}(\\/)?$/) !== null\n  ) {\n    const re = /^http(s)?:\\/\\//\n\n    if (cleanedUrl.match(re) === null) {\n      cleanedUrl = `http://${cleanedUrl}`\n    }\n\n    return cleanedUrl\n  }\n\n  return null\n}\n\n/**\n * Gets last segment of a URI\n * @param {string} uri\n * @returns {string}\n */\nexport const getLastURISegment = (uri: string): string => {\n  const parts: string[] = uri.split('/').reverse()\n\n  if (/\\w/.test(parts[0])) {\n    return parts[0]\n  } else {\n    return parts[1]\n  }\n}\n\n/**\n * Used to determine if an object is without null values in the first level.\n * @param {object}\n * @returns {boolean}\n */\nexport const objectIsDense = (object: object): boolean => {\n  const valuesArray = Object.values(object)\n\n  for (let i = 0; i < valuesArray.length; i++) {\n    if (valuesArray[i] === null) {\n      return false\n    }\n  }\n  return true\n}\n\n/**\n * Shorthand for foo !== null && foo !== undefined.\n * @param {any}\n * @returns {boolean}\n */\nexport const hasValue = (input: any): boolean => {\n  return input !== null && input !== undefined\n}\n\n/**\n * Prepends a string to all property names in an object\n * @param {object} - Routes object\n * @returns {object}\n */\nexport const prependToObjectKeys = (\n  object: { [key: string]: any },\n  string: string\n): object => {\n  const newObject: { [key: string]: any } = {}\n\n  Object.entries(object).forEach((entry) => {\n    newObject[`${string}${entry[0]}`] = entry[1]\n  })\n\n  return newObject\n}\n\n/**\n * Generates an Outlook friendly mailto URI\n * @param {object} - Email details object\n * @returns {string}\n */\nexport const makeMailURI = ({\n  to,\n  body,\n  ...parameters\n}: {\n  to: string | string[]\n  body: string\n}): string => {\n  const recipientString = Array.isArray(to)\n    ? to.join(',')\n    : typeof to === 'string'\n    ? to\n    : ''\n\n  let mailToUri = `mailto:${\n    typeof recipientString === 'string' ? recipientString : ''\n  }`\n  let parameterOperator = '?'\n\n  for (let [key, value] of Object.entries(parameters)) {\n    if (Array.isArray(value)) {\n      value = value.join(',')\n    }\n\n    if (typeof value === 'string' && value !== '') {\n      mailToUri += `${parameterOperator}${key}=${value}`\n      parameterOperator = '&'\n    }\n  }\n\n  if (typeof body === 'string' && body !== '') {\n    mailToUri += `&body=${encodeURIComponent(body) ?? ''}`\n  }\n\n  mailToUri = mailToUri.replace('%u2019', \"'\")\n\n  return mailToUri\n}\n"],"names":["phoneNumber","cleanNumber","replace","length","substring","concat","website","cleanedUrl","trim","match","uri","parts","split","reverse","test","object","valuesArray","Object","values","i","input","string","newObject","entries","forEach","entry","_ref","to","body","parameters","recipientString","Array","isArray","join","mailToUri","parameterOperator","_key","value","encodeURIComponent"],"version":3,"file":"index.js.map"}